#!/usr/bin/a68g --script

PROC platform is windows = BOOL: get env ("WINDIR") NE "";
STRING platform dir sep   = (platform is windows | "\"     | "/"        );
STRING executable suffix  = (platform is windows | ".exe"  | ""         );
STRING executable prefix  = (platform is windows | ""      | "./"       );
STRING calling convention = (platform is windows | "MSWIN" | "LINUX"    );

CO Statistics CO
INT tests run := 0;
INT tests failed := 0;
INT tests errored := 0;
INT tests skipped := 0;

CO Handle ‘command line args’ CO
BOOL enable colours := get env ("ENABLE_TEST_COLOURS") EQ "1";

CO We might only want to run some of the tests CO
STRING labels := get env ("RUN_TESTS");

PROC red    = (REF FILE f) VOID: (enable colours | put(f, (REPR 27, "[31m")));
PROC green  = (REF FILE f) VOID: (enable colours | put(f, (REPR 27, "[32m")));
PROC yellow = (REF FILE f) VOID: (enable colours | put(f, (REPR 27, "[33m")));
PROC resetc = (REF FILE f) VOID: (enable colours | put(f, (REPR 27, "[m")));

CO Get the exit code of a program. CO
PROC wexitstatus = (INT status) INT: (platform is windows | status | ABS ((BIN status SHR 8) AND BIN 255));

CO Helper because system() returns the exit status, not the exit code CO
PROC sh = (STRING cmd) INT: (platform is windows | system(cmd) | wexitstatus (system (cmd)));

CO Helper function to abort the program CO
PROC die = ([] UNION (PROC (REF FILE) VOID, CHAR, [] CHAR, INT) message) VOID:
BEGIN
    print ((red, "FATAL: "));
    print (message);
    print ((new line, resetc));

    CO ‘stop’ unfortunately only lets us exit w/ code 0 CO
    abend ("FATAL ERROR")
END;

CO Open a file and ensure that there was no error CO
PROC secure open = (STRING file name, CHANNEL channel) FILE:
BEGIN
  FILE f;
  IF open (f, file name, channel) /= 0 THEN die(("ERROR: Could not open 'out.txt'")) FI;
  f
END;

PROC string to number = (STRING s) INT: BEGIN
  INT out := 0;
  FOR index FROM LWB s TO UPB s DO
    CHAR c = s[index];
    IF NOT is digit (c) THEN die((red, "ERROR!  Expected digit but got ", c)) FI;
    INT tmp := ABS c;
    tmp -:= 48;
    out *:= 10;
    out +:= tmp
  OD;
  out
END;

PROC compare expected =
(INT status,
 STRING output,
 INT actual status,
 REF STRING actual output
) BOOL:
BEGIN
  BOOL retval := TRUE;

  CO open out.txt, compare contents with `output` CO
  FILE out := secure open ("out.txt", stand in channel);
  on logical file end (out, (REF FILE f) BOOL: past);
  STRING str;
  DO
    get(out, str);
    actual output +:= str;
    actual output +:= new line char;
    new line (out)
  UNTIL end of file (out) OD;

  past: SKIP;

  IF actual output /= output THEN
    retval := FALSE;
    return
  FI;

  close (out);

  IF actual status /= status
  THEN
    retval := FALSE;
    return
  FI;

  return: retval
END;

CO Compile a test and check if it passes CO
PROC compile and test = (
  STRING file name,
  INT return value,
  STRING output,
  BOOL expect error,
  BOOL optimise
) VOID:
BEGIN
  tests run +:= 1;

  STRING commands := "";

  STRING intercept command := ".." + platform dir sep + "bld" + platform dir sep + "intc"
                              + " -o test.S "
                              + (optimise | " -O " | "")
                              + (expect error | " > out.txt 2>&1 " | "")
                              + (enable colours | " --colours always " | "")
                              + "-cc " + calling convention + " "
                              + file name;

  commands +:= new line char + intercept command;

  CO Compile the program to ASM CO
  IF sh(".." + platform dir sep + "bld" + platform dir sep + "intc"
             + " -o test.S "
             + (optimise | " -O " | "")
             + (expect error | " > out.txt 2>&1 " | "")
             + (enable colours | " --colours always " | "")
             + "-cc " + calling convention + " "
             + file name) /= 0 THEN
    IF expect error THEN
      CO Error message CO
      STRING line := "";
      STRING contents := "";

      CO Read the error message CO
      FILE f := secure open ("out.txt", stand in channel);
      on logical file end (f, (REF FILE unused) BOOL: end);
      DO
        get (f, line);
        contents +:= line;
        contents +:= new line char;
        new line (f)
      OD;
      end:

      CO Make sure this is not an ICE CO
      IF string in string ("Internal Compiler Error", LOC INT, contents) THEN
        print (contents);
        print ((red, (optimise | "ERRORED! (optimised)     --  " | "ERRORED!                 --  "), file name, new line));
        tests errored +:= 1
      ELSE
        print((green, (optimise | "SUCCESS! (optimised)     --  " | "SUCCESS!                 --  "), file name, new line));
        GO TO return
      FI
    ELSE
      print((red, (optimise | "ERRORED! (optimised)     --  " | "ERRORED!                 --  "), file name, new line));
      tests errored +:= 1
    FI;
    GO TO return
  FI;

  CO Assemble it CO

  STRING compile_command := "gcc test.S -o test" + executable suffix;
  commands +:= new line char + compile_command;

  IF sh("gcc test.S -o test" + executable suffix) /= 0 THEN
    print((red, (optimise | "ERRORED! (optimised)     --  " | "ERRORED!                 --  "), file name, new line));
    tests errored +:= 1;
    GO TO return
  FI;

  CO If the test should error, then we shouldn’t even get here CO
  IF expect error THEN
    print((red, (optimise | "FAILED!  (optimised)     --  " | "FAILED!                  --  "), file name, new line));
    print(("    Expected error, but test compiled successfully", new line));
    tests failed +:= 1;
    GO TO return
  FI;

  STRING run_command := executable prefix + "test" + executable suffix + " > out.txt";
  commands +:= new line char + run_command;

  INT actual return value := sh(executable prefix + "test" + executable suffix + " > out.txt");
  STRING actual output := "";

  commands +:= new line char;

  IF compare expected (return value, output, actual return value, actual output)
  THEN
    print((green, (optimise | "SUCCESS! (optimised)     --  " | "SUCCESS!                 --  "), file name, new line))
  ELSE
    print((red, (optimise | "FAILED! (optimised)      --  " | "FAILED!                  --  "), file name, new line, resetc));
    print(("Invoked like: '", commands, "'", new line));
    printf(($"Expected exit code " g(0) ", but got " g(0)l$, return value, actual return value));
    print(("=== EXPECTED OUTPUT ===", new line, output,        "===", new line));
    print(("=== GOT OUTPUT ===",      new line, actual output, "===", new line));
    tests failed +:= 1
  FI;

  return: SKIP
END;

PROC run test = (STRING file name) VOID:
BEGIN
  FILE f := secure open(file name, stand in channel);
  on logical file end (f, (REF FILE unused) BOOL:
  BEGIN
    die(("ERROR! Test file ", file name, " does not contain a valid test!"));
    SKIP
  END);

  CO Save initial file contents as expected output. CO
  STRING str;

  CO Read first line as status return value CO
  get(f, (str, new line));

  IF UPB str < 3 THEN die(("ERROR!  First line not even long enough to contain return status.")) FI;
  IF str[1] /= REPR 59 THEN die(("ERROR!  First line does not start with comment!.")) FI;

  CO Cut off comment delimiters CO
  str := str[3..];

  CO Check for special strings CO
  BOOL skip := FALSE;
  IF str EQ "SKIP" THEN
    CO Read the next line CO
    get (f, (str, new line));
    str := str[3..];
    skip := TRUE
  FI;

  CO Check for labels CO
  IF string in string ("LABELS", LOC INT, str) THEN
    CO Skip ‘LABELS ’ CO
    str := str[8..];

    CO Skip this test if we have labels and this test isn’t in them CO
    IF labels NE "" AND labels NE str THEN GO TO return FI;

    CO Otherwise, move on to the next line CO
    get (f, (str, new line));
    str := str[3..]
  CO If we have labels, and this test doesn’t, skip it CO
  ELIF labels NE "" THEN
    GO TO return
  FI;


  CO Also skip it if we’re supposed to skip it anyway CO
  IF skip THEN
    print((yellow, "SKIPPED!                 --  ", file name, new line));
    print((        "SKIPPED! (optimised)     --  ", file name, new line));
    tests skipped +:= 1;
    GO TO return
  FI;

  BOOL expect error := FALSE;
  INT return value := 0;
  STRING output := "";

  IF str EQ "ERROR" THEN
    expect error := TRUE;
    get (f, (str, new line));
    str := str[4..]
  ELSE
    CO Convert string into a number CO
    return value := string to number(str);

    CO Collect expected stdout CO
    WHILE get(f, (str, new line)); str /= "" DO
      str := str[4..];
      output +:= str;
      output +:= new line char
    OD
  FI;

  CO Close the file CO
  close (f);

  CO Compile program CO
  compile and test (file name, return value, output, expect error, FALSE);
  compile and test (file name, return value, output, expect error, TRUE);

  return: SKIP
END;

CO Collect the tests CO
[] STRING tests = SORT get directory ("tests");

CO Run tests CO
FOR index FROM LWB tests TO UPB tests DO
  IF file is regular ("tests/" + tests[index]) THEN
    run test ("tests/" + tests[index])
  FI
OD;

CO Print summary CO
print (resetc);
printf (($"SUMMARY:" l
          "    Tests run:     " g(0) l
          "    Tests failed:  " g(0) l
          "    Tests errored: " g(0) l
          "    Tests skipped: " g(0) l$,
          tests run, tests failed, tests errored, tests skipped))
