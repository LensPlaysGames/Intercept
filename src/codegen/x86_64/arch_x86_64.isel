ISA: x86_64

;;;; PRELIMINARY COMMENTARY
;; NOTE: Search `;;;;` at beginning of line for section annotations

;; Comment

;; At top of every isel file is metadata. One definition per line. Ends
;; with an empty line, and that is where the match definitions may
;; begin.

;; Each definition begins with the keyword `match`.
;; Following `match` comes one or more instruction specifications,
;; constrained to general MIR opcodes.
;; An instruction specification is constructed like so:
;;   `<opcode> <identifier> "(" { <operand-type> <identifier> [ "=" <expression> ] [ "," ] } ")" [ "," ]`
;; After the instruction specifications comes the emitted instructions,
;; after the keyword `emit`. This is a block (wrapped in curly brackets)
;; of instruction specifications that are not constrained in any way.

;; Commas are optional.
;; Identifiers ARE case sensitive.

;; For now, just use C identifiers for opcodes

;; Operand Kind
;; Register == REG  == MIR_OP_REGISTER
;; Immediate == IMM == MIR_OP_IMMEDIATE
;; Block            == MIR_OP_BLOCK
;; Function == FUN  == MIR_OP_FUNCTION
;; Local            == MIR_OP_LOCAL_REF
;; Static           == MIR_OP_STATIC_REF

;; Every isel file that is parsed will start with the general MIR
;; opcodes defined, as well as some other things like the CompareType
;; enum.
;; The ISA should add definitions for its opcodes.

;; NOTE: Input MIR instructions are lowered from IR (general MIR), so
;; each one technically has it's own "result" virtual register that may
;; be accesed by using the name of the matched instruction. YOU CANNOT
;; USE THE RESULT REGISTER OF A LOWERED INSTRUCTION!

;; TODO: Special Operands:
;; ZERO  == MIR_OP_IMMEDIATE with value of 0

;; TODO: Figure out how to handle opcodes that should never show up here
;; Currently we have `discard`, but that doesn't error or anything. We
;; may want a keyword like `error` in the same place, which would print
;; the given error message and point to the source location, for
;; disallowed instructions or patterns.
;; MIR_PHI
;; MIR_REGISTER
;; MIR_PARAMETER
;; MIR_LIT_INTEGER
;; MIR_LIT_STRING

;; TODO: Allow patterns to constrain input by ensuring equality of certain operands
;;   match
;;   MIR_STORE i1(Immediate imm, Local l0)
;;   MIR_LOAD i2(l0)
;;   emit MX64_MOV(imm, l0)


match MIR_IMMEDIATE i1(Immediate imm)
emit MX64_MOV(imm, i1)

match MIR_NOT i1(Register r)
emit {
  MX64_NOT(r)
  MX64_MOV(r, i1)
}
match MIR_NOT i1(Immediate imm)
emit {
  MX64_MOV(imm, i1)
  MX64_NOT(i1)
}

match MIR_ZERO_EXTEND i1(Register r, IMM, IMM)
emit MX64_MOVZX(r, i1)
match MIR_SIGN_EXTEND i1(Register r, IMM, IMM)
emit MX64_MOVSX(r, i1)

match MIR_AND i1(Register value, Immediate mask)
emit {
  MX64_MOV(value, i1)
  MX64_AND(mask, i1)
}

;;;; MEMORY

;; We can get away with never emitting these, as they *should* be
;; inlined as operands when used.
match MIR_ALLOCA i1(Local) discard
match MIR_STATIC_REF i1(Static) discard

;;match MIR_BITCAST i1(Local src)
;;emit MX64_LEA(src, i1)

match MIR_COPY i1(Immediate imm)
emit MX64_MOV(imm, i1)
match MIR_COPY i1(Register src)
emit MX64_MOV(src, i1)
match MIR_COPY i1(Static src)
emit MX64_LEA(src, i1)
match MIR_COPY i1(Local src)
emit MX64_LEA(src, i1)
match MIR_COPY i1(Function f)
emit MX64_LEA(f, i1)

match MIR_LOAD i1(Static src)
emit MX64_MOV(src, i1)
match MIR_LOAD i1(Local src)
emit MX64_MOV(src, i1)
match MIR_LOAD i1(Immediate src)
emit MX64_MOV(src, i1)
match MIR_LOAD i1(Register src, IMM size)
emit MX64_MOV(src, Immediate offset = 0, i1, size)

match MIR_STORE(Immediate value, Register dst, IMM size)
emit MX64_MOV(value, dst, Immediate offset = 0, size)
match MIR_STORE i1(Immediate imm, Local local)
emit MX64_MOV(imm, local)
match MIR_STORE i1(Immediate imm, Static static)
emit MX64_MOV(imm, static)
match MIR_STORE(Register src, Register dst)
emit MX64_MOV(src, dst, Immediate offset = 0)
match MIR_STORE i1(Register r, Local local)
emit MX64_MOV(r, local)
match MIR_STORE i1(Register r, Static static)
emit MX64_MOV(r, static)
match MIR_STORE(Static value, Register dst)
emit MX64_MOV(value, dst, Immediate offset = 0)
match MIR_STORE(Static value, Static dst)
emit {
  ;; Load pointer to static value
  MX64_LEA i1(value, i1)
  ;; Copy pointer of static value to value of destination
  MX64_MOV(i1, dst)
}
match MIR_STORE(Local value, Local dst)
emit {
  ;; Load pointer to local value
  MX64_LEA i1(value, i1) ;; TODO: size of i1 is zero...
  ;; Copy pointer of local value to value of destination
  MX64_MOV(i1, dst)
}
match MIR_STORE(Function f, Static object)
emit {
  ;; Load pointer to function
  MX64_LEA i1(f, i1) ;; TODO: size of i1 is zero...
  ;; Copy pointer of function to value of destination
  MX64_MOV(i1, object)
}

;; This is the pattern of instructions emitted when calculating stack
;; parameter's offsets, and can be implemented using a single `mov` instruction.
;; v0 | copy r15 8
;; v2 | add v0 8, 40
;; v3 | load v2 8, 8
match
MIR_COPY cp(Register src)
MIR_ADD add(Register lhs is cp, Immediate imm)
MIR_LOAD load(Register ptr is add, Immediate sz)
emit MX64_MOV(src, imm, add, sz)

match MIR_LOAD i1(Local local)
emit MX64_MOV(local, i1)
match MIR_LOAD i1(Register reg)
emit MX64_MOV(reg, i1)

;;;; CONTROL FLOW

match MIR_BRANCH br(Block b)
emit MX64_JMP(b)

match MIR_BRANCH_CONDITIONAL cond_br(Immediate cond, Block then, Block otherwise)
emit {
  ;; Load condition immediate so we can test it
  MX64_MOV i1(cond, i1)
  MX64_TEST(i1, i1)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_Z, otherwise)
  MX64_JMP(then)
}
match MIR_BRANCH_CONDITIONAL cond_br(Register cond, Block then, Block otherwise)
emit {
  MX64_TEST(cond, cond)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_Z, otherwise)
  MX64_JMP(then)
}

match MIR_RETURN ret()
emit MX64_RET()
match MIR_RETURN ret(Local src)
emit {
  MX64_LEA(src, ret)
  MX64_RET()
}
match MIR_RETURN ret(Register reg)
emit {
  MX64_MOV(reg, ret)
  MX64_RET()
}
match MIR_RETURN ret(Immediate imm)
emit {
  MX64_MOV(imm, ret)
  MX64_RET()
}

match MIR_UNREACHABLE u()
emit MX64_UD2()

;;;; ARITHMETIC

match
MIR_ADD i1(Immediate lhs, Immediate rhs)
emit {
  MX64_MOV(rhs, i1)
  MX64_ADD(lhs, i1)
}
match
MIR_ADD i1(Register lhs, Register rhs)
emit {
  MX64_ADD(rhs, lhs)
  MX64_MOV(lhs, i1)
}
match
MIR_ADD i1(Register reg, Immediate imm)
emit {
  MX64_ADD(imm, reg)
  MX64_MOV(reg, i1)
}
match
MIR_ADD i1(Immediate imm, Register reg)
emit {
  MX64_ADD(imm, reg)
  MX64_MOV(reg, i1)
}
match
MIR_ADD i1(Static object, Immediate imm)
emit {
  MX64_LEA(object, i1)
  MX64_ADD(imm, i1)
}
match
MIR_ADD i1(Immediate imm, Static object)
emit {
  MX64_LEA(object, i1)
  MX64_ADD(imm, i1)
}
match
MIR_ADD i1(Local object, Immediate imm)
emit {
  MX64_LEA(object, i1)
  MX64_ADD(imm, i1)
}
match
MIR_ADD i1(Immediate imm, Local object)
emit {
  MX64_LEA(object, i1)
  MX64_ADD(imm, i1)
}

match
MIR_MUL i1(Immediate lhs, Immediate rhs)
emit {
  MX64_MOV(lhs, i1)
  MX64_IMUL(rhs, i1)
}
match
MIR_MUL i1(Register lhs, Register rhs)
emit {
  MX64_IMUL(rhs, lhs)
  MX64_MOV(lhs, i1)
}
match
MIR_MUL i1(Register reg, Immediate imm)
emit {
  MX64_IMUL(imm, reg)
  MX64_MOV(reg, i1)
}
match
MIR_MUL i1(Immediate imm, Register reg)
emit {
  MX64_IMUL(imm, reg)
  MX64_MOV(reg, i1)
}

match
MIR_DIV i1(Register lhs, IMM rhs)
emit {
  MX64_MOV i2(rhs, i2)
  MIR_DIV(lhs, i2)
}
match
MIR_DIV i1(Register lhs, Register rhs)
emit {
  MX64_MOV(lhs, Register = rax)
  MX64_CQO()
  MX64_IDIV(rhs) clobbers rax, rdx;
  MX64_MOV(Register = rax, i1)
}
match
MIR_MOD i1(Register lhs, IMM rhs)
emit {
  MX64_MOV i2(rhs, i2)
  MIR_MOD(lhs, i2)
}
match
MIR_MOD i1(Register lhs, Register rhs)
emit {
  MX64_MOV(lhs, Register = rax)
  MX64_CQO()
  MX64_IDIV(rhs) clobbers rax, rdx;
  MX64_MOV(Register = rdx, i1)
}

match
MIR_SUB i1(Immediate lhs, Immediate rhs)
emit {
  MX64_MOV(lhs, i1)
  MX64_SUB(rhs, i1)
}
match MIR_SUB i1(Register reg, Immediate imm)
emit {
  MX64_SUB(imm, reg)
  MX64_MOV(reg, i1)
}
match MIR_SUB i1(Immediate imm, Register reg)
emit {
  MX64_MOV(imm, i1)
  MX64_SUB(reg, i1)
}
match MIR_SUB i1(Register lhs, Register rhs)
emit {
  MX64_SUB(rhs, lhs)
  MX64_MOV(lhs, i1)
}

;;;; BITWISE

match MIR_AND i1(Immediate value, Immediate mask)
emit {
  MX64_MOV(value, i1)
  MX64_AND(mask, i1)
}
match MIR_AND i1(Immediate value, Register mask)
emit {
  MX64_MOV(value, i1)
  MX64_AND(mask, i1)
}
match MIR_AND i1(Register value, Register mask)
emit {
  MX64_AND(mask, value)
  MX64_MOV(value, i1)
}
match MIR_AND i1(Register value, Immediate mask)
emit {
  MX64_AND(mask, value)
  MX64_MOV(value, i1)
}

match MIR_OR i1(Immediate value, Immediate bits)
emit {
  MX64_MOV(value, i1)
  MX64_OR(bits, i1)
}
match MIR_OR i1(Immediate value, Register bits)
emit {
  MX64_MOV(value, i1)
  MX64_OR(bits, i1)
}
match MIR_OR i1(Register value, Register bits)
emit {
  MX64_OR(bits, value)
  MX64_MOV(value, i1)
}
match MIR_OR i1(Register value, Immediate bits)
emit {
  MX64_OR(bits, value)
  MX64_MOV(value, i1)
}

match MIR_SHL i1(Immediate value, Immediate shift_amount)
emit {
  MX64_MOV(shift_amount, Register = ecx)
  MX64_MOV(value, i1)
  MX64_SAL(i1) clobbers rcx;
}
match MIR_SHL i1(Immediate value, Register shift_amount)
emit {
  MPSEUDO_R2R(shift_amount, Register = ecx)
  MX64_MOV(value, i1)
  MX64_SAL(i1) clobbers rcx;
}
match MIR_SHL i1(Register value, Immediate shift_amount)
emit {
  MX64_MOV(shift_amount, Register = ecx)
  MX64_SAL(value) clobbers rcx;
  MX64_MOV(value, i1)
}
match MIR_SHL i1(Register value, Register shift_amount)
emit {
  MPSEUDO_R2R(shift_amount, Register = ecx)
  MX64_SAL(value) clobbers rcx;
  MX64_MOV(value, i1)
}

match MIR_SHR i1(Immediate value, Immediate shift_amount)
emit {
  MX64_MOV(shift_amount, Register = ecx)
  MX64_MOV(value, i1)
  MX64_SHR(i1) clobbers rcx;
}
match MIR_SHR i1(Immediate value, Register shift_amount)
emit {
  MPSEUDO_R2R(shift_amount, Register = ecx)
  MX64_MOV(value, i1)
  MX64_SHR(i1) clobbers rcx;
}
match MIR_SHR i1(Register value, Immediate shift_amount)
emit {
  MX64_MOV(shift_amount, Register = ecx)
  MX64_SHR(value) clobbers rcx;
  MX64_MOV(value, i1)
}
match MIR_SHR i1(Register value, Register shift_amount)
emit {
  MPSEUDO_R2R(shift_amount, Register = ecx)
  MX64_SHR(value) clobbers rcx;
  MX64_MOV(value, i1)
}

match MIR_SAR i1(Immediate value, Immediate shift_amount)
emit {
  MX64_MOV(shift_amount, Register = ecx)
  MX64_MOV(value, i1)
  MX64_SAR(i1) clobbers rcx;
}
match MIR_SAR i1(Immediate value, Register shift_amount)
emit {
  MPSEUDO_R2R(shift_amount, Register = ecx)
  MX64_MOV(value, i1)
  MX64_SAR(i1) clobbers rcx;
}
match MIR_SAR i1(Register value, Immediate shift_amount)
emit {
  MX64_MOV(shift_amount, Register = ecx)
  MX64_SAR(value) clobbers rcx;
  MX64_MOV(value, i1)
}
match MIR_SAR i1(Register value, Register shift_amount)
emit {
  MPSEUDO_R2R(shift_amount, Register = ecx)
  MX64_SAR(value) clobbers rcx;
  MX64_MOV(value, i1)
}

;;;; COMPARISON
;; TODO: Dear God, we need a macro system of *some* sort, even if it's
;; at the lexing level :eyes:
match
MIR_LT lt(Register lhs, Register rhs)
emit {
  MX64_CMP(rhs, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, lt)
  MX64_SETCC(Immediate cmp_type = COMPARE_LT, lt)
}
match
MIR_LT lt(Register lhs, Immediate imm)
emit {
  MX64_CMP(imm, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, lt)
  MX64_SETCC(Immediate cmp_type = COMPARE_LT, lt)
}
match
MIR_LT lt(Register lhs, Immediate imm)
MIR_BRANCH_CONDITIONAL(Register cond is lt, Block then, Block otherwise)
emit {
  MX64_CMP(imm, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_GE, otherwise)
  MX64_JMP(then)
}
match
MIR_LT lt(Register lhs, Register rhs)
MIR_BRANCH_CONDITIONAL(Register cond is lt, Block then, Block otherwise)
emit {
  MX64_CMP(rhs, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_GE, otherwise)
  MX64_JMP(then)
}
match
MIR_LT lt(Immediate lhs, Immediate rhs)
emit {
  MX64_MOV i1(lhs, i1)
  MX64_CMP(rhs, i1)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, lt)
  MX64_SETCC(Immediate cmp_type = COMPARE_LT, lt)
}

match
MIR_GT gt(Register lhs, Register rhs)
emit {
  MX64_CMP(rhs, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, gt)
  MX64_SETCC(Immediate cmp_type = COMPARE_GT, gt)
}
match
MIR_GT gt(Register lhs, IMM imm)
emit {
  MX64_CMP(imm, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, gt)
  MX64_SETCC(Immediate cmp_type = COMPARE_GT, gt)
}
match
MIR_GT gt(Register lhs, Immediate imm)
MIR_BRANCH_CONDITIONAL(Register cond is gt, Block then, Block otherwise)
emit {
  MX64_CMP(imm, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_LE, otherwise)
  MX64_JMP(then)
}
match
MIR_GT gt(Register lhs, Register rhs)
MIR_BRANCH_CONDITIONAL(Register cond is gt, Block then, Block otherwise)
emit {
  MX64_CMP(rhs, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_LE, otherwise)
  MX64_JMP(then)
}
match
MIR_GT gt(Immediate lhs, Immediate rhs)
emit {
  MX64_MOV i1(lhs, i1)
  MX64_CMP(rhs, i1)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, gt)
  MX64_SETCC(Immediate cmp_type = COMPARE_GT, gt)
}

match
MIR_LE le(Register lhs, Register rhs)
emit {
  MX64_CMP(rhs, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, le)
  MX64_SETCC(Immediate cmp_type = COMPARE_LE, le)
}
match
MIR_LE le(Register lhs, Immediate imm)
emit {
  MX64_CMP(imm, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, le)
  MX64_SETCC(Immediate cmp_type = COMPARE_LE, le)
}
match
MIR_LE le(Register lhs, Immediate imm)
MIR_BRANCH_CONDITIONAL(Register cond is le, Block then, Block otherwise)
emit {
  MX64_CMP(imm, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_G, otherwise)
  MX64_JMP(then)
}
match
MIR_LE le(Register lhs, Register rhs)
MIR_BRANCH_CONDITIONAL(Register cond is le, Block then, Block otherwise)
emit {
  MX64_CMP(rhs, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_G, otherwise)
  MX64_JMP(then)
}
match
MIR_LE le(Immediate lhs, Immediate rhs)
emit {
  MX64_MOV i1(lhs, i1)
  MX64_CMP(rhs, i1)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, le)
  MX64_SETCC(Immediate cmp_type = COMPARE_LE, le)
}

match
MIR_GE ge(Register lhs, Register rhs)
emit {
  MX64_CMP(rhs, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, ge)
  MX64_SETCC(Immediate cmp_type = COMPARE_GE, ge)
}
match
MIR_GE ge(Register lhs, IMM imm)
emit {
  MX64_CMP(imm, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, ge)
  MX64_SETCC(Immediate cmp_type = COMPARE_GE, ge)
}
match
MIR_GE ge(Register lhs, Immediate imm)
MIR_BRANCH_CONDITIONAL(Register cond is ge, Block then, Block otherwise)
emit {
  MX64_CMP(imm, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_L, otherwise)
  MX64_JMP(then)
}
match
MIR_GE ge(Register lhs, Register rhs)
MIR_BRANCH_CONDITIONAL(Register cond is ge, Block then, Block otherwise)
emit {
  MX64_CMP(rhs, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_L, otherwise)
  MX64_JMP(then)
}
match
MIR_GE ge(Immediate lhs, Immediate rhs)
emit {
  MX64_MOV i1(lhs, i1)
  MX64_CMP(rhs, i1)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, ge)
  MX64_SETCC(Immediate cmp_type = COMPARE_GE, ge)
}

match
MIR_EQ eq(Register lhs, Register rhs)
emit {
  MX64_CMP(rhs, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, eq)
  MX64_SETCC(Immediate cmp_type = COMPARE_EQ, eq)
}
match
MIR_EQ eq(Register lhs, Immediate imm)
emit {
  MX64_CMP(imm, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, eq)
  MX64_SETCC(Immediate cmp_type = COMPARE_EQ, eq)
}
match
MIR_EQ eq(Register lhs, Immediate imm)
MIR_BRANCH_CONDITIONAL(Register cond is eq, Block then, Block otherwise)
emit {
  MX64_CMP(imm, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_NZ, otherwise)
  MX64_JMP(then)
}
match
MIR_EQ eq(Register lhs, Register rhs)
MIR_BRANCH_CONDITIONAL(Register cond is eq, Block then, Block otherwise)
emit {
  MX64_CMP(rhs, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_NZ, otherwise)
  MX64_JMP(then)
}
match
MIR_EQ eq(Immediate lhs, Immediate rhs)
emit {
  MX64_MOV i1(lhs, i1)
  MX64_CMP(rhs, i1)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, eq)
  MX64_SETCC(Immediate cmp_type = COMPARE_EQ, eq)
}

match
MIR_NE ne(Register lhs, Register rhs)
emit {
  MX64_CMP(rhs, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, ne)
  MX64_SETCC(Immediate cmp_type = COMPARE_NE, ne)
}
match
MIR_NE ne(Register lhs, Immediate imm)
emit {
  MX64_CMP(imm, lhs)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, ne)
  MX64_SETCC(Immediate cmp_type = COMPARE_NE, ne)
}
match
MIR_NE ne(Register lhs, Immediate imm)
MIR_BRANCH_CONDITIONAL(Register cond is ne, Block then, Block otherwise)
emit {
  MX64_CMP(imm, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_Z, otherwise)
  MX64_JMP(then)
}
match
MIR_NE ne(Register lhs, Register rhs)
MIR_BRANCH_CONDITIONAL(Register cond is ne, Block then, Block otherwise)
emit {
  MX64_CMP(rhs, lhs)
  MX64_JCC(Immediate jump_type = JUMP_TYPE_Z, otherwise)
  MX64_JMP(then)
}
match
MIR_NE ne(Immediate lhs, Immediate rhs)
emit {
  MX64_MOV i1(lhs, i1)
  MX64_CMP(rhs, i1)
  ;; We MUST use mov here instead of xor as mov does not clobber flags.
  MX64_MOV(Immediate i = 0, ne)
  MX64_SETCC(Immediate cmp_type = COMPARE_NE, ne)
}

;;;; Alternative Syntax Experiments:

;;match MIR_ADD i1
;;  where i1 has Immediate lhs, Immediate rhs
;;emit
;;  MX64_MOV(rhs, REG i1)
;;  MX64_ADD(lhs, REG i1)
;;  .

;;match i1
;;  where i1 MIR_ADD
;;    with o1 IMM, o2 IMM
;;emit {
;;  MOV o1, i1 REG
;;  ADD o2, i1 REG
;;} .
